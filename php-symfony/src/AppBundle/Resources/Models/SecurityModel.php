<?php
/**
 *  Security Model class
 *  App Authentication via OAuth2 Authentication Sequence
 *  Step 1 – Redirect to Authorization Server to Obtain Auth Code
 *  Step 2 – Exchange Auth Code for Access Token and save it to session
 */

namespace AppBundle\Resources\Models;

use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\HttpFoundation\Session\Session;

class SecurityModel
{
    CONST TRADESHIFT_CLIENT_ID = 'AppVendor.AppID';  // see Oauth2 Client ID in Tradeshift App Edit form
    CONST TRADESHIFT_REDIRECT_URL = 'https://your-web-site.com/oauth2/callback';  //should be registered at Tradeshift side
    CONST TRADESHIFT_CLIENT_SECRET = 'XXXX-XXXX-XXXXX-XXXXX'; // generated by Tradeshift

    CONST TRADESHIFT_AUTH__LOGIN_URL = 'https://api-sandbox.tradeshift.com/tradeshift/auth/login';
    CONST TRADESHIFT_AUTH_TOKEN_URL ='https://api-sandbox.tradeshift.com/tradeshift/auth/token';
    CONST TRADESHIFT_REST_API_URL = 'https://api-sandbox.tradeshift.com/tradeshift';  // main url of the requested server
    CONST HEADER_CONTENT_TYPE = "application/x-www-form-urlencoded";
    CONST HEADER_AUTHORIZATION_TYPE = "Basic";
    CONST HEADER_AUTHORIZATION_REQUEST_TYPE = "Bearer";
    CONST AUTHORIZATION_CODE_GRANT_TYPE = "authorization_code";

    /**
     * Builds url to send credentials
     *
     * @return string
     */
    public static function getApiUrl()
    {
       return static::TRADESHIFT_AUTH__LOGIN_URL . '?response_type=code&client_id=' . static::TRADESHIFT_CLIENT_ID . '&redirect_uri='. static::TRADESHIFT_REDIRECT_URL . '&scope=openid';

    }


    /**
     * Get "code" from server
     *
     * @param $url
     * @return mixed
     */
    public function sendGetCode($url)
    {
       // create a new cURL resource
       $ch = curl_init();
       // set URL and other appropriate options
       curl_setopt($ch, CURLOPT_URL, $url );
       curl_setopt($ch, CURLOPT_HEADER, true);

       if (curl_exec($ch) === false)
       {
           throw new HttpException (400, 'Curl error: ' . curl_error($ch) );
       }

       $curlReasponse= curl_getinfo($ch);

       curl_close($ch);// close cURL resource, and free up system resources

       return $curlReasponse['url'];

    }

    /**
     * Receive Token from server
     *
     * @param $url
     * @param $code
     * @return mixed
     */
    public function sendGetToken($url, $code)
    {
        $session = new Session();

        $additionalHeaders = [
            'Authorization: '.static::HEADER_AUTHORIZATION_TYPE.' '. base64_encode( static::TRADESHIFT_CLIENT_ID . ":". static::TRADESHIFT_CLIENT_SECRET ),
            'Content-Type: '. static::HEADER_CONTENT_TYPE
        ];
        $payloadName = [
            'grant_type'=> static::AUTHORIZATION_CODE_GRANT_TYPE,
            'code'=> $code
        ];

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $additionalHeaders);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($payloadName));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        $curlResult = curl_exec($ch);
        $curlReasponse= curl_getinfo($ch);

        if ( $curlResult === false)
        {
            throw new HttpException ($curlReasponse['http_code'], 'Curl error: ' . curl_error($ch) );
        }
        // save toke to session
        $session->set('token', json_decode($curlResult, true) );

        curl_close($ch);

        return $session->get('token'); // Associative array
    }
}