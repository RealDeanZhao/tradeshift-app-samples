/**
 * Tradeshift Tasks
 * This is a sample for swagger-maven-plugin
 * <p>
 * OpenAPI spec version: v1
 * Contact: jba@tradeshift.com
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import com.google.gson.reflect.TypeToken;
import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;
import io.swagger.client.auth.OAuth;
import io.swagger.client.model.ExternalTaskDTO;
import io.swagger.client.model.TaskDTO;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for completeTask */
    private com.squareup.okhttp.Call completeTaskCall(String taskId, String outcome, String completedBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling completeTask(Async)");
        }

        // verify the required parameter 'outcome' is set
        if (outcome == null) {
            throw new ApiException("Missing the required parameter 'outcome' when calling completeTask(Async)");
        }


        // create path and map variables
        String localVarPath = "/external/tasks/{taskId}/outcome/{outcome}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()))
                .replaceAll("\\{" + "outcome" + "\\}", apiClient.escapeString(outcome.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (completedBy != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "completedBy", completedBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        addOauth2Token(localVarHeaderParams);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Marks a task as completed, setting the provided outcome
     *
     * @param taskId  (required)
     * @param outcome  (required)
     * @param completedBy  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void completeTask(String taskId, String outcome, String completedBy) throws ApiException {
        completeTaskWithHttpInfo(taskId, outcome, completedBy);
    }

    /**
     * Marks a task as completed, setting the provided outcome
     *
     * @param taskId  (required)
     * @param outcome  (required)
     * @param completedBy  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> completeTaskWithHttpInfo(String taskId, String outcome, String completedBy) throws ApiException {
        com.squareup.okhttp.Call call = completeTaskCall(taskId, outcome, completedBy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Marks a task as completed, setting the provided outcome (asynchronously)
     *
     * @param taskId  (required)
     * @param outcome  (required)
     * @param completedBy  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call completeTaskAsync(String taskId, String outcome, String completedBy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = completeTaskCall(taskId, outcome, completedBy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /* Build call for createTask */
    private com.squareup.okhttp.Call createTaskCall(ExternalTaskDTO externalTaskDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = externalTaskDTO;

        // verify the required parameter 'externalTaskDTO' is set
        if (externalTaskDTO == null) {
            throw new ApiException("Missing the required parameter 'externalTaskDTO' when calling createTask(Async)");
        }


        // create path and map variables
        String localVarPath = "/external/tasks".replaceAll("\\{format\\}", "json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        addOauth2Token(localVarHeaderParams);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a Task
     * Create a task. The handler and assignees params are mandatory, all other parameters are optional. if the assigner field is not provided, the currently logged-in user will be set as the task&#39;s assigner
     * @param externalTaskDTO \&quot;Takes an ExternalTaskDTO that only updates the following parameters:\&quot; +             \&quot;handler - A string value that specifies the UI component that would consume the task\&quot;,             \&quot;subjectId - An identifier to the document or object associated with this task\&quot;,             \&quot;context - App-specific information needed by the handler in order to handle this task. This can be in any format \&quot; +                     \&quot;that is convenient for the handler, and is entirely for its consumption\&quot;,             \&quot;assignees - A list of ids of the users to whom this task will be assigned\&quot;,             \&quot;assigner - The user who assigned this task\&quot; (required)
     * @return ExternalTaskDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExternalTaskDTO createTask(ExternalTaskDTO externalTaskDTO) throws ApiException {
        ApiResponse<ExternalTaskDTO> resp = createTaskWithHttpInfo(externalTaskDTO);
        return resp.getData();
    }

    /**
     * Create a Task
     * Create a task. The handler and assignees params are mandatory, all other parameters are optional. if the assigner field is not provided, the currently logged-in user will be set as the task&#39;s assigner
     * @param externalTaskDTO \&quot;Takes an ExternalTaskDTO that only updates the following parameters:\&quot; +             \&quot;handler - A string value that specifies the UI component that would consume the task\&quot;,             \&quot;subjectId - An identifier to the document or object associated with this task\&quot;,             \&quot;context - App-specific information needed by the handler in order to handle this task. This can be in any format \&quot; +                     \&quot;that is convenient for the handler, and is entirely for its consumption\&quot;,             \&quot;assignees - A list of ids of the users to whom this task will be assigned\&quot;,             \&quot;assigner - The user who assigned this task\&quot; (required)
     * @return ApiResponse&lt;ExternalTaskDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExternalTaskDTO> createTaskWithHttpInfo(ExternalTaskDTO externalTaskDTO) throws ApiException {
        com.squareup.okhttp.Call call = createTaskCall(externalTaskDTO, null, null);
        Type localVarReturnType = new TypeToken<ExternalTaskDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Task (asynchronously)
     * Create a task. The handler and assignees params are mandatory, all other parameters are optional. if the assigner field is not provided, the currently logged-in user will be set as the task&#39;s assigner
     * @param externalTaskDTO \&quot;Takes an ExternalTaskDTO that only updates the following parameters:\&quot; +             \&quot;handler - A string value that specifies the UI component that would consume the task\&quot;,             \&quot;subjectId - An identifier to the document or object associated with this task\&quot;,             \&quot;context - App-specific information needed by the handler in order to handle this task. This can be in any format \&quot; +                     \&quot;that is convenient for the handler, and is entirely for its consumption\&quot;,             \&quot;assignees - A list of ids of the users to whom this task will be assigned\&quot;,             \&quot;assigner - The user who assigned this task\&quot; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTaskAsync(ExternalTaskDTO externalTaskDTO, final ApiCallback<ExternalTaskDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTaskCall(externalTaskDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExternalTaskDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for deleteTask */
    private com.squareup.okhttp.Call deleteTaskCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteTask(Async)");
        }


        // create path and map variables
        String localVarPath = "/external/tasks/{taskId}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        addOauth2Token(localVarHeaderParams);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an Existing Task
     *
     * @param taskId  (required)
     * @return ExternalTaskDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExternalTaskDTO deleteTask(String taskId) throws ApiException {
        ApiResponse<ExternalTaskDTO> resp = deleteTaskWithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * Delete an Existing Task
     *
     * @param taskId  (required)
     * @return ApiResponse&lt;ExternalTaskDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExternalTaskDTO> deleteTaskWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaskCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<ExternalTaskDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an Existing Task (asynchronously)
     *
     * @param taskId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaskAsync(String taskId, final ApiCallback<ExternalTaskDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaskCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExternalTaskDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getTask */
    private com.squareup.okhttp.Call getTaskCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTask(Async)");
        }


        // create path and map variables
        String localVarPath = "/external/tasks/{taskId}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        addOauth2Token(localVarHeaderParams);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Fetches the task with the provided ID
     *
     * @param taskId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getTask(String taskId) throws ApiException {
        getTaskWithHttpInfo(taskId);
    }

    /**
     * Fetches the task with the provided ID
     *
     * @param taskId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getTaskWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getTaskCall(taskId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Fetches the task with the provided ID (asynchronously)
     *
     * @param taskId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskAsync(String taskId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskCall(taskId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /* Build call for getTaskCounts */
    private com.squareup.okhttp.Call getTaskCountsCall(String handler, String state, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;


        // create path and map variables
        String localVarPath = "/external/tasks/count".replaceAll("\\{format\\}", "json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (handler != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "handler", handler));
        if (state != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get a list of task counts for an account
     * Returns a map of task groups and counts in each group
     * @param handler  (optional)
     * @param state  (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> getTaskCounts(String handler, String state) throws ApiException {
        ApiResponse<Map<String, Object>> resp = getTaskCountsWithHttpInfo(handler, state);
        return resp.getData();
    }

    /**
     * Get a list of task counts for an account
     * Returns a map of task groups and counts in each group
     * @param handler  (optional)
     * @param state  (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> getTaskCountsWithHttpInfo(String handler, String state) throws ApiException {
        com.squareup.okhttp.Call call = getTaskCountsCall(handler, state, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of task counts for an account (asynchronously)
     * Returns a map of task groups and counts in each group
     * @param handler  (optional)
     * @param state  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskCountsAsync(String handler, String state, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskCountsCall(handler, state, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getTasks */
    private com.squareup.okhttp.Call getTasksCall(String handler, String subjectId, String state, String assignee, Integer limit, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;


        // create path and map variables
        String localVarPath = "/external/tasks".replaceAll("\\{format\\}", "json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (handler != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "handler", handler));
        if (subjectId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "subjectId", subjectId));
        if (state != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));
        if (assignee != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "assignee", assignee));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (page != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        addOauth2Token(localVarHeaderParams);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Fetches all tasks the user has access to and lets page through them
     *
     * @param handler  (optional)
     * @param subjectId  (optional)
     * @param state  (optional)
     * @param assignee  (optional)
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 0)
     * @return List&lt;ExternalTaskDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExternalTaskDTO> getTasks(String handler, String subjectId, String state, String assignee, Integer limit, Integer page) throws ApiException {
        ApiResponse<List<ExternalTaskDTO>> resp = getTasksWithHttpInfo(handler, subjectId, state, assignee, limit, page);
        return resp.getData();
    }

    /**
     * Fetches all tasks the user has access to and lets page through them
     *
     * @param handler  (optional)
     * @param subjectId  (optional)
     * @param state  (optional)
     * @param assignee  (optional)
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 0)
     * @return ApiResponse&lt;List&lt;ExternalTaskDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExternalTaskDTO>> getTasksWithHttpInfo(String handler, String subjectId, String state, String assignee, Integer limit, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getTasksCall(handler, subjectId, state, assignee, limit, page, null, null);
        Type localVarReturnType = new TypeToken<List<ExternalTaskDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches all tasks the user has access to and lets page through them (asynchronously)
     *
     * @param handler  (optional)
     * @param subjectId  (optional)
     * @param state  (optional)
     * @param assignee  (optional)
     * @param limit  (optional, default to 10)
     * @param page  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTasksAsync(String handler, String subjectId, String state, String assignee, Integer limit, Integer page, final ApiCallback<List<ExternalTaskDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTasksCall(handler, subjectId, state, assignee, limit, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExternalTaskDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for updateTask */
    private com.squareup.okhttp.Call updateTaskCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTask(Async)");
        }


        // create path and map variables
        String localVarPath = "/external/tasks/{taskId}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update Task
     *
     * @param taskId  (required)
     * @return TaskDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskDTO updateTask(String taskId) throws ApiException {
        ApiResponse<TaskDTO> resp = updateTaskWithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * Update Task
     *
     * @param taskId  (required)
     * @return ApiResponse&lt;TaskDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskDTO> updateTaskWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<TaskDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Task (asynchronously)
     *
     * @param taskId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskAsync(String taskId, final ApiCallback<TaskDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    private void addOauth2Token(Map<String, String> localVarHeaderParams) {
        if (((OAuth) this.apiClient.getAuthentications().get("OAuth")).getAccessToken() != null) {
            localVarHeaderParams.put("Authorization", "Bearer " + ((OAuth) this.apiClient.getAuthentications().get("OAuth")).getAccessToken());
        }
    }
}
